From 175ad4ce1d8a0b8b09080c6c252b22b0418dc2f8 Mon Sep 17 00:00:00 2001
From: Sergey Volkov <Sergey.Volkov@promwad.com>
Date: Sun, 7 Feb 2021 17:01:50 +0300
Subject: [PATCH 2/4] fbdev: add ingenic smart lcd framebuffer support

---
 drivers/video/fbdev/Kconfig          |  10 +
 drivers/video/fbdev/Makefile         |   1 +
 drivers/video/fbdev/jz4740_lcd.h     | 120 +++++
 drivers/video/fbdev/jz4740_slcd.h    | 178 +++++++
 drivers/video/fbdev/jz4740_slcd_fb.c | 945 +++++++++++++++++++++++++++++++++++
 5 files changed, 1254 insertions(+)
 create mode 100644 drivers/video/fbdev/jz4740_lcd.h
 create mode 100644 drivers/video/fbdev/jz4740_slcd.h
 create mode 100644 drivers/video/fbdev/jz4740_slcd_fb.c

diff --git a/drivers/video/fbdev/Kconfig b/drivers/video/fbdev/Kconfig
index cfb7f5612ef0..faa09ca0573a 100644
--- a/drivers/video/fbdev/Kconfig
+++ b/drivers/video/fbdev/Kconfig
@@ -889,6 +889,16 @@ config FB_NVIDIA
 	  To compile this driver as a module, choose M here: the
 	  module will be called nvidiafb.
 
+config FB_JZ4740
+	tristate "Ingenic JZ47XX Framebuffer Support"
+	depends on FB && MACH_INGENIC
+	select FB_BACKLIGHT
+	select FB_SYS_FILLRECT
+	select FB_SYS_COPYAREA
+	select FB_SYS_IMAGEBLIT
+	help
+	  TODO...
+
 config FB_NVIDIA_I2C
 	bool "Enable DDC Support"
 	depends on FB_NVIDIA
diff --git a/drivers/video/fbdev/Makefile b/drivers/video/fbdev/Makefile
index 477b9624b703..214c15717f94 100644
--- a/drivers/video/fbdev/Makefile
+++ b/drivers/video/fbdev/Makefile
@@ -118,6 +118,7 @@ obj-$(CONFIG_FB_MB862XX)	  += mb862xx/
 obj-$(CONFIG_FB_HYPERV)		  += hyperv_fb.o
 obj-$(CONFIG_FB_OPENCORES)	  += ocfb.o
 obj-$(CONFIG_FB_SM712)		  += sm712fb.o
+obj-$(CONFIG_FB_JZ4740)		  += jz4740_slcd_fb.o
 
 # Platform or fallback drivers go here
 obj-$(CONFIG_FB_UVESA)            += uvesafb.o
diff --git a/drivers/video/fbdev/jz4740_lcd.h b/drivers/video/fbdev/jz4740_lcd.h
new file mode 100644
index 000000000000..009b7c11fcc2
--- /dev/null
+++ b/drivers/video/fbdev/jz4740_lcd.h
@@ -0,0 +1,120 @@
+/*
+ *  Copyright (C) 2009, Lars-Peter Clausen <lars@metafoo.de>
+ *  	JZ4720/JZ4740 SoC LCD framebuffer driver
+ *
+ *  This program is free software; you can redistribute	 it and/or modify it
+ *  under  the terms of	 the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the	License, or (at your
+ *  option) any later version.
+ *
+ *  You should have received a copy of the  GNU General Public License along
+ *  with this program; if not, write  to the Free Software Foundation, Inc.,
+ *  675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#ifndef __JZ4740_LCD_H__
+#define __JZ4740_LCD_H__
+
+#include <linux/bitops.h>
+
+#define JZ_REG_LCD_CFG		0x00
+#define JZ_REG_LCD_VSYNC	0x04
+#define JZ_REG_LCD_HSYNC	0x08
+#define JZ_REG_LCD_VAT		0x0C
+#define JZ_REG_LCD_DAH		0x10
+#define JZ_REG_LCD_DAV		0x14
+#define JZ_REG_LCD_PS		0x18
+#define JZ_REG_LCD_CLS		0x1C
+#define JZ_REG_LCD_SPL		0x20
+#define JZ_REG_LCD_REV		0x24
+#define JZ_REG_LCD_CTRL		0x30
+#define JZ_REG_LCD_STATE	0x34
+#define JZ_REG_LCD_IID		0x38
+#define JZ_REG_LCD_DA0		0x40
+#define JZ_REG_LCD_SA0		0x44
+#define JZ_REG_LCD_FID0		0x48
+#define JZ_REG_LCD_CMD0		0x4C
+#define JZ_REG_LCD_DA1		0x50
+#define JZ_REG_LCD_SA1		0x54
+#define JZ_REG_LCD_FID1		0x58
+#define JZ_REG_LCD_CMD1		0x5C
+#define JZ_REG_LCD_DESZ0	0x6C
+#define JZ_REG_LCD_DESZ1	0x7C
+#define JZ_REG_LCD_RGBC		0x90
+#define JZ_REG_LCD_OSD_CFG	0x100
+#define JZ_REG_LCD_OSD_CTRL	0x104
+#define JZ_REG_LCD_OSD_STATE	0x108
+#define JZ_REG_LCD_BGC		0x010C
+#define JZ_REG_LCD_KEY0		0x0110
+#define JZ_REG_LCD_KEY1		0x0114
+#define JZ_REG_LCD_ALPHA 	0x0118
+#define JZ_REG_LCD_IPUR		0x011C
+#define JZ_REG_LCD_XYP0		0x0120
+#define JZ_REG_LCD_XYP1		0x0124
+#define JZ_REG_LCD_SIZE0	0x0128
+#define JZ_REG_LCD_SIZE1	0x012C
+
+#define JZ_LCD_CFG_SLCD			BIT(31)
+#define JZ_LCD_CFG_PS_DISABLE		BIT(23)
+#define JZ_LCD_CFG_CLS_DISABLE		BIT(22)
+#define JZ_LCD_CFG_SPL_DISABLE		BIT(21)
+#define JZ_LCD_CFG_REV_DISABLE		BIT(20)
+#define JZ_LCD_CFG_HSYNCM		BIT(19)
+#define JZ_LCD_CFG_PCLKM		BIT(18)
+#define JZ_LCD_CFG_INV			BIT(17)
+#define JZ_LCD_CFG_SYNC_DIR		BIT(16)
+#define JZ_LCD_CFG_PS_POLARITY		BIT(15)
+#define JZ_LCD_CFG_CLS_POLARITY		BIT(14)
+#define JZ_LCD_CFG_SPL_POLARITY		BIT(13)
+#define JZ_LCD_CFG_REV_POLARITY		BIT(12)
+#define JZ_LCD_CFG_HSYNC_ACTIVE_LOW	BIT(11)
+#define JZ_LCD_CFG_PCLK_FALLING_EDGE	BIT(10)
+#define JZ_LCD_CFG_DE_ACTIVE_LOW	BIT(9)
+#define JZ_LCD_CFG_VSYNC_ACTIVE_LOW	BIT(8)
+#define JZ_LCD_CFG_18_BIT		BIT(7)
+#define JZ_LCD_CFG_PDW			(BIT(5) | BIT(4))
+#define JZ_LCD_CFG_MODE_MASK		0xf
+
+#define JZ_LCD_CTRL_BURST_4		(0x0 << 28)
+#define JZ_LCD_CTRL_BURST_8		(0x1 << 28)
+#define JZ_LCD_CTRL_BURST_16		(0x2 << 28)
+#define JZ_LCD_CTRL_RGB555		BIT(27)
+#define JZ_LCD_CTRL_OFUP		BIT(26)
+#define JZ_LCD_CTRL_FRC_GRAYSCALE_16	(0x0 << 24)
+#define JZ_LCD_CTRL_FRC_GRAYSCALE_4	(0x1 << 24)
+#define JZ_LCD_CTRL_FRC_GRAYSCALE_2	(0x2 << 24)
+#define JZ_LCD_CTRL_PDD_MASK		(0xff << 16)
+#define JZ_LCD_CTRL_EOF_IRQ		BIT(13)
+#define JZ_LCD_CTRL_SOF_IRQ		BIT(12)
+#define JZ_LCD_CTRL_OFU_IRQ		BIT(11)
+#define JZ_LCD_CTRL_IFU0_IRQ		BIT(10)
+#define JZ_LCD_CTRL_IFU1_IRQ		BIT(9)
+#define JZ_LCD_CTRL_DD_IRQ		BIT(8)
+#define JZ_LCD_CTRL_QDD_IRQ		BIT(7)
+#define JZ_LCD_CTRL_REVERSE_ENDIAN	BIT(6)
+#define JZ_LCD_CTRL_LSB_FISRT		BIT(5)
+#define JZ_LCD_CTRL_DISABLE		BIT(4)
+#define JZ_LCD_CTRL_ENABLE		BIT(3)
+#define JZ_LCD_CTRL_BPP_1		0x0
+#define JZ_LCD_CTRL_BPP_2		0x1
+#define JZ_LCD_CTRL_BPP_4		0x2
+#define JZ_LCD_CTRL_BPP_8		0x3
+#define JZ_LCD_CTRL_BPP_15_16		0x4
+#define JZ_LCD_CTRL_BPP_18_24		0x5
+
+#define JZ_LCD_CMD_SOF_IRQ		BIT(31)
+#define JZ_LCD_CMD_EOF_IRQ		BIT(30)
+#define JZ_LCD_CMD_ENABLE_PAL		BIT(28)
+
+#define JZ_LCD_SYNC_MASK		0x3ff
+
+#define JZ_LCD_STATE_QUICK_DISABLED	BIT(7)
+#define JZ_LCD_STATE_EOF		BIT(5)
+#define JZ_LCD_STATE_SOF		BIT(4)
+#define JZ_LCD_STATE_OUT_FIFO_UNDERRUN	BIT(3)
+#define JZ_LCD_STATE_FIFO0_UNDERRUN	BIT(2)
+#define JZ_LCD_STATE_FIFO1_UNDERRUN	BIT(1)
+#define JZ_LCD_STATE_DISABLED		BIT(0)
+
+#endif  /*__JZ4740_LCD_H__*/
diff --git a/drivers/video/fbdev/jz4740_slcd.h b/drivers/video/fbdev/jz4740_slcd.h
new file mode 100644
index 000000000000..17500e8d045e
--- /dev/null
+++ b/drivers/video/fbdev/jz4740_slcd.h
@@ -0,0 +1,178 @@
+/*
+ * linux/drivers/video/jz4740_slcd.h
+ * -- LCD panel definitions for Ingenic On-Chip SLCD frame buffer device
+ *
+ * Copyright (C) 2005-2007, Ingenic Semiconductor Inc.
+ * Copyright (C) 2010, Maarten ter Huurne <maarten@treewalker.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#ifndef __JZ4740_SLCD_H__
+#define __JZ4740_SLCD_H__
+
+//#include <asm/mach-jz4740/base.h>
+#include <linux/gpio.h>
+#include <linux/mutex.h>
+#include <linux/workqueue.h>
+
+#include <linux/fb.h>
+
+#define JZ_LCD_TYPEOF_SMART  BIT(5)
+#define JZ_LCD_TYPEOF_SERIAL BIT(6)
+
+enum jz4740_fb_lcd_type {
+	JZ_LCD_TYPE_GENERIC_16_BIT = 0,
+	JZ_LCD_TYPE_GENERIC_18_BIT = 0 | (1 << 4),
+	JZ_LCD_TYPE_SPECIAL_TFT_1 = 1,
+	JZ_LCD_TYPE_SPECIAL_TFT_2 = 2,
+	JZ_LCD_TYPE_SPECIAL_TFT_3 = 3,
+	JZ_LCD_TYPE_NON_INTERLACED_CCIR656 = 5,
+	JZ_LCD_TYPE_INTERLACED_CCIR656 = 7,
+	JZ_LCD_TYPE_SINGLE_COLOR_STN = 8,
+	JZ_LCD_TYPE_SINGLE_MONOCHROME_STN = 9,
+	JZ_LCD_TYPE_DUAL_COLOR_STN = 10,
+	JZ_LCD_TYPE_DUAL_MONOCHROME_STN = 11,
+	JZ_LCD_TYPE_8BIT_SERIAL = 12,
+	JZ_LCD_TYPE_SMART_PARALLEL_8_BIT  = 1 | JZ_LCD_TYPEOF_SMART,
+	JZ_LCD_TYPE_SMART_PARALLEL_16_BIT = 0 | JZ_LCD_TYPEOF_SMART,
+	JZ_LCD_TYPE_SMART_PARALLEL_18_BIT = 2 | JZ_LCD_TYPEOF_SMART,
+	JZ_LCD_TYPE_SMART_SERIAL_8_BIT  = 1 | JZ_LCD_TYPEOF_SMART | JZ_LCD_TYPEOF_SERIAL,
+	JZ_LCD_TYPE_SMART_SERIAL_16_BIT = 0 | JZ_LCD_TYPEOF_SMART | JZ_LCD_TYPEOF_SERIAL,
+	JZ_LCD_TYPE_SMART_SERIAL_18_BIT = 2 | JZ_LCD_TYPEOF_SMART | JZ_LCD_TYPEOF_SERIAL,
+};
+
+#define JZ4740_FB_SPECIAL_TFT_CONFIG(start, stop) (((start) << 16) | (stop))
+
+/*
+* width: width of the lcd display in mm
+* height: height of the lcd display in mm
+* num_modes: size of modes
+* modes: list of valid video modes
+* bpp: bits per pixel for the lcd
+* lcd_type: lcd type
+*/
+
+struct jz4740_fb_platform_data {
+	unsigned int width;
+	unsigned int height;
+
+	size_t num_modes;
+	struct fb_videomode *modes;
+
+	unsigned int bpp;
+	enum jz4740_fb_lcd_type lcd_type;
+
+	struct {
+		uint32_t spl;
+		uint32_t cls;
+		uint32_t ps;
+		uint32_t rev;
+	} special_tft_config;
+
+	unsigned pixclk_falling_edge:1;
+	unsigned date_enable_active_low:1;
+	unsigned chip_select_active_low:1;
+	unsigned register_select_active_low:1;
+};
+
+/*************************************************************************
+ * SLCD (Smart LCD Controller)
+ *************************************************************************/
+
+#define JZ_REG_SLCD_CFG		0xA0	/* SLCD Configure Register */
+#define JZ_REG_SLCD_CTRL	0xA4	/* SLCD Control Register */
+#define JZ_REG_SLCD_STATE	0xA8	/* SLCD Status Register */
+#define JZ_REG_SLCD_DATA	0xAC	/* SLCD Data Register */
+#define JZ_REG_SLCD_FIFO	0xB0	/* SLCD FIFO Register */
+
+/* SLCD Configure Register */
+#define SLCD_CFG_BURST_BIT		14
+#define SLCD_CFG_BURST_MASK		(0x3 << SLCD_CFG_BURST_BIT)
+  #define SLCD_CFG_BURST_4_WORD		(0 << SLCD_CFG_BURST_BIT)
+  #define SLCD_CFG_BURST_8_WORD		(1 << SLCD_CFG_BURST_BIT)
+#define SLCD_CFG_DWIDTH_BIT		10
+#define SLCD_CFG_DWIDTH_MASK		(0x7 << SLCD_CFG_DWIDTH_BIT)
+  #define SLCD_CFG_DWIDTH_18		(0 << SLCD_CFG_DWIDTH_BIT)
+  #define SLCD_CFG_DWIDTH_16		(1 << SLCD_CFG_DWIDTH_BIT)
+  #define SLCD_CFG_DWIDTH_8_x3		(2 << SLCD_CFG_DWIDTH_BIT)
+  #define SLCD_CFG_DWIDTH_8_x2		(3 << SLCD_CFG_DWIDTH_BIT)
+  #define SLCD_CFG_DWIDTH_8_x1		(4 << SLCD_CFG_DWIDTH_BIT)
+  #define SLCD_CFG_DWIDTH_9_x2		(7 << SLCD_CFG_DWIDTH_BIT)
+#define SLCD_CFG_CWIDTH_BIT		8
+#define SLCD_CFG_CWIDTH_MASK		(0x3 << SLCD_CFG_CWIDTH_BIT)
+  #define SLCD_CFG_CWIDTH_16BIT		(0 << SLCD_CFG_CWIDTH_BIT)
+  #define SLCD_CFG_CWIDTH_8BIT		(1 << SLCD_CFG_CWIDTH_BIT)
+  #define SLCD_CFG_CWIDTH_18BIT		(2 << SLCD_CFG_CWIDTH_BIT)
+#define SLCD_CFG_CS_ACTIVE_LOW		(0 << 4)
+#define SLCD_CFG_CS_ACTIVE_HIGH		(1 << 4)
+#define SLCD_CFG_RS_CMD_LOW		(0 << 3)
+#define SLCD_CFG_RS_CMD_HIGH		(1 << 3)
+#define SLCD_CFG_CLK_ACTIVE_FALLING	(0 << 1)
+#define SLCD_CFG_CLK_ACTIVE_RISING	(1 << 1)
+#define SLCD_CFG_TYPE_PARALLEL		(0 << 0)
+#define SLCD_CFG_TYPE_SERIAL		(1 << 0)
+
+/* SLCD Control Register */
+#define SLCD_CTRL_DMA_EN		(1 << 0)
+
+/* SLCD Status Register */
+#define SLCD_STATE_BUSY			(1 << 0)
+
+/* SLCD Data Register */
+#define SLCD_DATA_RS_DATA		(0 << 31)
+#define SLCD_DATA_RS_COMMAND		(1 << 31)
+
+/* SLCD FIFO Register */
+#define SLCD_FIFO_RS_DATA		(0 << 31)
+#define SLCD_FIFO_RS_COMMAND		(1 << 31)
+
+/*************************************************************************/
+
+struct jzfb_framedesc {
+	uint32_t next;
+	uint32_t addr;
+	uint32_t id;
+	uint32_t cmd;
+} __attribute__((packed));
+
+struct jzfb {
+	struct fb_info *fb;
+	struct platform_device *pdev;
+	void __iomem *base;
+	struct resource *mem;
+	struct jz4740_fb_platform_data *pdata;
+
+	size_t vidmem_size;
+	void *vidmem;
+	dma_addr_t vidmem_phys;
+
+	size_t blackline_size;
+	void *blackline;
+	dma_addr_t blackline_phys;
+
+#if 0
+	struct jzfb_framedesc (*framedesc)[3];
+#else
+	struct jzfb_framedesc (*framedesc)[2];
+#endif
+	dma_addr_t framedesc_phys;
+
+	struct completion dma_completion;
+	unsigned refresh_on_pan:1;
+
+	struct clk *ldclk;
+	struct clk *lpclk;
+	struct gpio_desc *cs;
+
+	unsigned is_enabled:1;
+	struct mutex lock; /* Protecting against running enable/disable in paralell */
+
+	struct delayed_work refresh_work;
+	u32 pseudo_palette[16];
+};
+
+#endif  /*__JZ4740_SLCD_H__*/
diff --git a/drivers/video/fbdev/jz4740_slcd_fb.c b/drivers/video/fbdev/jz4740_slcd_fb.c
new file mode 100644
index 000000000000..355c369f2dfa
--- /dev/null
+++ b/drivers/video/fbdev/jz4740_slcd_fb.c
@@ -0,0 +1,945 @@
+/*
+ *  Copyright (C) 2009-2010, Lars-Peter Clausen <lars@metafoo.de>
+ *  Copyright (C) 2010, Maarten ter Huurne <maarten@treewalker.org>
+ *  Copyright (C) 2021, Siarhei Volkau <lis8215@gmail.com>
+ *		JZ47XX SoC Smart LCD framebuffer driver
+ *
+ *  This program is free software; you can redistribute	 it and/or modify it
+ *  under  the terms of	 the GNU General  Public License as published by the
+ *  Free Software Foundation;  either version 2 of the	License, or (at your
+ *  option) any later version.
+ *
+ *  You should have received a copy of the  GNU General Public License along
+ *  with this program; if not, write  to the Free Software Foundation, Inc.,
+ *  675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/platform_device.h>
+#include <linux/clk.h>
+#include <linux/interrupt.h>
+#include <linux/delay.h>
+#include <linux/console.h>
+#include <linux/fb.h>
+#include <linux/dma-mapping.h>
+
+#include "jz4740_lcd.h"
+#include "jz4740_slcd.h"
+
+static struct fb_fix_screeninfo jzfb_fix = {
+	.id =		"JZ4740 SLCD FB",
+	.type =		FB_TYPE_PACKED_PIXELS,
+	.visual =	FB_VISUAL_TRUECOLOR,
+	.xpanstep =	0,
+	.ypanstep =	1,
+	.ywrapstep =	0,
+	.accel =	FB_ACCEL_NONE,
+};
+
+static int jzfb_setcolreg(unsigned regno, unsigned red, unsigned green,
+			unsigned blue, unsigned transp, struct fb_info *fb)
+{
+	if (regno >= 16)
+		return -EINVAL;
+
+	red   = (red   * ((1 << fb->var.red.length  ) - 1)) / ((1 << 16) - 1);
+	green = (green * ((1 << fb->var.green.length) - 1)) / ((1 << 16) - 1);
+	blue  = (blue  * ((1 << fb->var.blue.length ) - 1)) / ((1 << 16) - 1);
+
+	((uint32_t *)fb->pseudo_palette)[regno] =
+		(red   << fb->var.red.offset  ) |
+		(green << fb->var.green.offset) |
+		(blue  << fb->var.blue.offset );
+
+	return 0;
+}
+
+static int jzfb_get_controller_bpp(struct jzfb *jzfb)
+{
+	switch (jzfb->pdata->bpp) {
+	case 18:
+	case 24:
+		return 32;
+	case 15:
+		return 16;
+	default:
+		return jzfb->pdata->bpp;
+	}
+}
+
+static struct fb_videomode *jzfb_get_mode(struct jzfb *jzfb, struct fb_var_screeninfo *var)
+{
+	size_t i;
+	struct fb_videomode *mode = jzfb->pdata->modes;
+
+	for (i = 0; i < jzfb->pdata->num_modes; ++i, ++mode) {
+		if (mode->xres == var->xres && mode->yres == var->yres)
+			return mode;
+	}
+
+	return NULL;
+}
+
+static int jzfb_check_var(struct fb_var_screeninfo *var, struct fb_info *fb)
+{
+	struct jzfb *jzfb = fb->par;
+	struct fb_videomode *mode;
+
+	if (var->bits_per_pixel != jzfb_get_controller_bpp(jzfb) &&
+		var->bits_per_pixel != jzfb->pdata->bpp)
+		return -EINVAL;
+
+	mode = jzfb_get_mode(jzfb, var);
+	if (mode == NULL)
+		return -EINVAL;
+
+	fb_videomode_to_var(var, mode);
+
+	/* Reserve space for double buffering. */
+	var->yres_virtual = var->yres * 2;
+
+	switch (jzfb->pdata->bpp) {
+	case 8:
+		break;
+	case 15:
+		var->red.offset = 10;
+		var->red.length = 5;
+		var->green.offset = 5;
+		var->green.length = 5;
+		var->blue.offset = 0;
+		var->blue.length = 5;
+		break;
+	case 16:
+		var->red.offset = 11;
+		var->red.length = 5;
+		var->green.offset = 5;
+		var->green.length = 6;
+		var->blue.offset = 0;
+		var->blue.length = 5;
+		break;
+	case 18:
+		var->red.offset = 16;
+		var->red.length = 6;
+		var->green.offset = 8;
+		var->green.length = 6;
+		var->blue.offset = 0;
+		var->blue.length = 6;
+		var->bits_per_pixel = 32;
+		break;
+	case 32:
+	case 24:
+		var->transp.offset = 24;
+		var->transp.length = 8;
+		var->red.offset = 16;
+		var->red.length = 8;
+		var->green.offset = 8;
+		var->green.length = 8;
+		var->blue.offset = 0;
+		var->blue.length = 8;
+		var->bits_per_pixel = 32;
+		break;
+	default:
+		break;
+	}
+
+	return 0;
+}
+
+static void jzfb_stop_controller(struct jzfb *jzfb)
+{
+	u32 ctrl = readl(jzfb->base + JZ_REG_LCD_CTRL);
+	ctrl &= ~JZ_LCD_CTRL_ENABLE;
+	ctrl |= JZ_LCD_CTRL_DISABLE;
+	writel(ctrl, jzfb->base + JZ_REG_LCD_CTRL);
+}
+
+static void jzfb_upload_frame_dma(struct jzfb *jzfb)
+{
+	struct fb_info *fb = jzfb->fb;
+	struct fb_videomode *mode = fb->mode;
+	__u32 offset = fb->fix.line_length * fb->var.yoffset;
+	__u32 size = fb->fix.line_length * mode->yres;
+	u32 ctrl;
+
+	/* Ensure that the data to be uploaded is in memory. */
+	dma_cache_sync(fb->device, jzfb->vidmem + offset, size,
+		       DMA_TO_DEVICE);
+
+	gpiod_set_value(jzfb->cs, GPIOD_OUT_HIGH);
+
+	// reset the write position horizontal & vertical
+	while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+	writel(BIT(31) | 0x00, jzfb->base + JZ_REG_SLCD_DATA);
+	while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+	writel(BIT(31) | 0x20, jzfb->base + JZ_REG_SLCD_DATA);
+
+	while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+	writel(0x00, jzfb->base + JZ_REG_SLCD_DATA);
+	while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+	writel(0x00, jzfb->base + JZ_REG_SLCD_DATA);
+
+	// reset the write position horizontal & vertical
+	while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+	writel(BIT(31) | 0x00, jzfb->base + JZ_REG_SLCD_DATA);
+	while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+	writel(BIT(31) | 0x21, jzfb->base + JZ_REG_SLCD_DATA);
+
+	while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+	writel(0x00, jzfb->base + JZ_REG_SLCD_DATA);
+	while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+	writel(0x00, jzfb->base + JZ_REG_SLCD_DATA);
+
+	// set the write address to GRAM
+	while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+	writel(BIT(31) | 0x00, jzfb->base + JZ_REG_SLCD_DATA);
+	while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+	writel(BIT(31) | 0x22, jzfb->base + JZ_REG_SLCD_DATA);
+
+	while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+	writeb(readb(jzfb->base + JZ_REG_SLCD_CTRL) | SLCD_CTRL_DMA_EN,
+		jzfb->base + JZ_REG_SLCD_CTRL);
+
+	// clear the state
+	writel(0, jzfb->base + JZ_REG_LCD_STATE);
+
+	// enable controller
+	ctrl = readl(jzfb->base + JZ_REG_LCD_CTRL);
+	ctrl |= JZ_LCD_CTRL_ENABLE;
+	ctrl &= ~JZ_LCD_CTRL_DISABLE;
+	writel(ctrl, jzfb->base + JZ_REG_LCD_CTRL);
+}
+#if 0 // CPU_MODE
+static void jzfb_upload_frame_cpu(struct jzfb *jzfb)
+{
+	const int num_pixels = jzfb->fb->mode->xres * jzfb->fb->mode->yres;
+	uint16_t *p = jzfb->vidmem;
+	int i;
+
+	gpiod_set_value(jzfb->cs, GPIOD_OUT_HIGH);
+	for (i = 0; i < num_pixels; i++) {
+		uint16_t rgb = *p++;
+		while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+		writel(SLCD_DATA_RS_DATA | rgb, jzfb->base + JZ_REG_SLCD_DATA);
+	}
+	while (readb(jzfb->base + JZ_REG_SLCD_STATE) & SLCD_STATE_BUSY);
+	gpiod_set_value(jzfb->cs, GPIOD_OUT_LOW);
+}
+#endif
+
+static void jzfb_refresh_work(struct work_struct *work)
+{
+	struct jzfb *jzfb = container_of(work, struct jzfb, refresh_work.work);
+
+	mutex_lock(&jzfb->lock);
+	if (jzfb->is_enabled) {
+		int interval;
+
+		if (jzfb->dma_completion.done) {
+			if (jzfb->refresh_on_pan)
+				interval = HZ / 5;
+			else
+				interval = HZ / 60;
+			jzfb->refresh_on_pan = 0;
+
+			//init_completion(&jzfb->dma_completion);
+			jzfb_upload_frame_dma(jzfb);
+		} else
+			interval = 1;
+
+		schedule_delayed_work(&jzfb->refresh_work, interval);
+#if 0 // CPU_MODE
+		jzfb_upload_frame_cpu(jzfb);
+		schedule_delayed_work(&jzfb->refresh_work, HZ / 10);
+#endif
+	}
+	mutex_unlock(&jzfb->lock);
+}
+
+static int jzfb_set_par(struct fb_info *info)
+{
+	struct jzfb *jzfb = info->par;
+	struct fb_var_screeninfo *var = &info->var;
+	struct fb_videomode *mode;
+	uint16_t slcd_cfg;
+
+	mode = jzfb_get_mode(jzfb, var);
+	if (mode == NULL)
+		return -EINVAL;
+
+	info->mode = mode;
+
+	slcd_cfg = SLCD_CFG_BURST_8_WORD;
+	/* command size */
+	slcd_cfg |= (jzfb->pdata->lcd_type & 3) << SLCD_CFG_CWIDTH_BIT;
+	/* data size */
+	if (jzfb->pdata->lcd_type & JZ_LCD_TYPEOF_SERIAL) {
+		/* serial */
+		unsigned int num_bits;
+		switch (jzfb->pdata->lcd_type) {
+		case JZ_LCD_TYPE_SMART_SERIAL_8_BIT:
+			slcd_cfg |= SLCD_CFG_DWIDTH_8_x1;
+			num_bits = 8;
+			break;
+		case JZ_LCD_TYPE_SMART_SERIAL_16_BIT:
+			slcd_cfg |= SLCD_CFG_DWIDTH_16;
+			num_bits = 16;
+			break;
+		case JZ_LCD_TYPE_SMART_SERIAL_18_BIT:
+			slcd_cfg |= SLCD_CFG_DWIDTH_18;
+			num_bits = 18;
+			break;
+		default:
+			num_bits = 0;
+			break;
+		}
+		if (num_bits != jzfb->pdata->bpp) {
+			dev_err(&jzfb->pdev->dev,
+				"Data size (%d) does not match bpp (%d)\n",
+				num_bits, jzfb->pdata->bpp);
+		}
+		slcd_cfg |= SLCD_CFG_TYPE_SERIAL;
+	} else {
+		/* parallel */
+		switch (jzfb->pdata->bpp) {
+		case 8:
+			slcd_cfg |= SLCD_CFG_DWIDTH_8_x1;
+			break;
+		case 15:
+		case 16:
+			switch (jzfb->pdata->lcd_type) {
+			case JZ_LCD_TYPE_SMART_PARALLEL_8_BIT:
+				slcd_cfg |= SLCD_CFG_DWIDTH_8_x2;
+				break;
+			default:
+				slcd_cfg |= SLCD_CFG_DWIDTH_16;
+				break;
+			}
+			break;
+		case 18:
+			switch (jzfb->pdata->lcd_type) {
+			case JZ_LCD_TYPE_SMART_PARALLEL_8_BIT:
+				slcd_cfg |= SLCD_CFG_DWIDTH_8_x3;
+				break;
+			case JZ_LCD_TYPE_SMART_PARALLEL_16_BIT:
+				slcd_cfg |= SLCD_CFG_DWIDTH_9_x2;
+				break;
+			case JZ_LCD_TYPE_SMART_PARALLEL_18_BIT:
+				slcd_cfg |= SLCD_CFG_DWIDTH_18;
+				break;
+			default:
+				break;
+			}
+			break;
+		case 24:
+			slcd_cfg |= SLCD_CFG_DWIDTH_8_x3;
+			break;
+		default:
+			dev_err(&jzfb->pdev->dev,
+				"Unsupported value for bpp: %d\n",
+				jzfb->pdata->bpp);
+		}
+		slcd_cfg |= SLCD_CFG_TYPE_PARALLEL;
+	}
+	if (!jzfb->pdata->chip_select_active_low)
+		slcd_cfg |= SLCD_CFG_CS_ACTIVE_HIGH;
+	if (!jzfb->pdata->register_select_active_low)
+		slcd_cfg |= SLCD_CFG_RS_CMD_HIGH;
+	if (!jzfb->pdata->pixclk_falling_edge)
+		slcd_cfg |= SLCD_CFG_CLK_ACTIVE_RISING;
+
+#if 0
+	// TODO(MtH): Compute rate from refresh or vice versa.
+	if (mode->pixclock) {
+		rate = PICOS2KHZ(mode->pixclock) * 1000;
+		mode->refresh = rate / vt / ht;
+	} else {
+		if (jzfb->pdata->lcd_type == JZ_LCD_TYPE_8BIT_SERIAL)
+			rate = mode->refresh * (vt + 2 * mode->xres) * ht;
+		else
+			rate = mode->refresh * vt * ht;
+
+		mode->pixclock = KHZ2PICOS(rate / 1000);
+	}
+#endif
+
+	mutex_lock(&jzfb->lock);
+	if (!jzfb->is_enabled) {
+		clk_enable(jzfb->ldclk);
+	} else {
+		// TODO(MtH): We should not change config while DMA might be running.
+		// TODO use quick disable
+	}
+
+	writew(slcd_cfg, jzfb->base + JZ_REG_SLCD_CFG);
+
+	// TODO use mode for right values
+	writel(JZ_LCD_CTRL_BURST_16 | JZ_LCD_CTRL_OFUP | JZ_LCD_CTRL_BPP_15_16 | JZ_LCD_CTRL_EOF_IRQ | JZ_LCD_CTRL_SOF_IRQ, jzfb->base + JZ_REG_LCD_CTRL);
+	writel(240, jzfb->base + JZ_REG_LCD_VSYNC);
+	writel(320, jzfb->base + JZ_REG_LCD_HSYNC);
+	writew(BIT(3) | BIT(0), jzfb->base + JZ_REG_LCD_OSD_CFG);
+	writew((4 << 0), jzfb->base + JZ_REG_LCD_OSD_CTRL);
+	writew(0, jzfb->base + JZ_REG_LCD_RGBC); //disable
+	writew(0, jzfb->base + JZ_REG_LCD_IPUR); // disable
+	writel(0, jzfb->base + JZ_REG_LCD_BGC); // black
+	writel(0, jzfb->base + JZ_REG_LCD_KEY0); // disable
+	writel(0, jzfb->base + JZ_REG_LCD_KEY1); // disable
+	writeb(128, jzfb->base + JZ_REG_LCD_ALPHA); // to make sure F0 not blended completely
+	writel((320 << 16) | (240 << 0), jzfb->base + JZ_REG_LCD_VAT);
+	writel((0 << 16) | ((320) << 0), jzfb->base + JZ_REG_LCD_DAH);
+	writel((0 << 16) | ((240) << 0), jzfb->base + JZ_REG_LCD_DAV);
+	writel((0 << 16) | (0 << 0), jzfb->base + JZ_REG_LCD_XYP0);
+	writel((0 << 16) | (0 << 0), jzfb->base + JZ_REG_LCD_XYP1);
+	writel((240 << 16) | (320 << 0), jzfb->base + JZ_REG_LCD_SIZE0);
+	writel((0 << 16) | (0 << 0), jzfb->base + JZ_REG_LCD_SIZE1);
+
+	{ // apply OSD changes
+		u16 osdctl = readw(jzfb->base + JZ_REG_LCD_OSD_CTRL);
+		writew(osdctl | BIT(3), jzfb->base + JZ_REG_LCD_OSD_CTRL);
+		while (readw(jzfb->base + JZ_REG_LCD_OSD_CTRL) & BIT(3));
+	}
+
+	if (!jzfb->is_enabled) {
+		clk_disable(jzfb->ldclk);
+	} else {
+		// TODO reconfigure DMA
+		// TODO re-enable lcd controller back
+	}
+
+	mutex_unlock(&jzfb->lock);
+
+	// TODO(MtH): Use maximum transfer speed that panel can handle.
+	//            ILI9325 can do 10 MHz.
+	clk_set_rate(jzfb->lpclk, 20000000);
+	clk_set_rate(jzfb->ldclk, 42000000);
+
+	return 0;
+}
+
+static void jzfb_enable(struct jzfb *jzfb)
+{
+	uint32_t ctrl;
+
+	clk_enable(jzfb->ldclk);
+
+#if 0 // looks dangerous
+	writel(0, jzfb->base + JZ_REG_LCD_STATE);
+	jzfb_stop_controller(jzfb);
+	complete_all(&jzfb->dma_completion);
+
+	ctrl = readl(jzfb->base + JZ_REG_LCD_CTRL);
+	ctrl |= JZ_LCD_CTRL_ENABLE;
+	ctrl &= ~JZ_LCD_CTRL_DISABLE;
+	writel(ctrl, jzfb->base + JZ_REG_LCD_CTRL);
+#endif
+
+	schedule_delayed_work(&jzfb->refresh_work, 0);
+}
+
+static void jzfb_disable(struct jzfb *jzfb)
+{
+	/* It is safe but wasteful to call refresh_work() while disabled. */
+	cancel_delayed_work_sync(&jzfb->refresh_work);
+
+	/* Abort any transfer that might be in progress and allow direct
+	   writes to the panel. */
+	//jzfb_stop_controller(jzfb);
+
+	complete_all(&jzfb->dma_completion);
+
+	clk_disable(jzfb->ldclk);
+}
+
+static int jzfb_blank(int blank_mode, struct fb_info *info)
+{
+	struct jzfb *jzfb = info->par;
+	int ret = 0;
+	int new_enabled = (blank_mode == FB_BLANK_UNBLANK);
+
+	mutex_lock(&jzfb->lock);
+	if (new_enabled) {
+		if (!jzfb->is_enabled)
+			jzfb_enable(jzfb);
+	} else {
+		if (jzfb->is_enabled) {
+			jzfb_disable(jzfb);
+		}
+	}
+	if (!ret)
+		jzfb->is_enabled = new_enabled;
+	mutex_unlock(&jzfb->lock);
+
+	return ret;
+}
+
+static int jzfb_wait_for_vsync(struct fb_info *info)
+{
+	struct jzfb *jzfb = info->par;
+
+	return wait_for_completion_interruptible(&jzfb->dma_completion);
+}
+
+static int jzfb_pan_display(struct fb_var_screeninfo *var, struct fb_info *info)
+{
+	struct jzfb *jzfb = info->par;
+	info->var.yoffset = var->yoffset;
+
+	/* Ensure that the data to be uploaded is in memory. */
+	dma_cache_sync(&jzfb->pdev->dev, jzfb->vidmem
+				+ info->fix.line_length * var->yoffset,
+				info->fix.line_length * var->yres,
+				DMA_TO_DEVICE);
+
+	/* update frame start address for TV-out mode */
+	(*jzfb->framedesc)[0].addr = jzfb->vidmem_phys
+	                      + info->fix.line_length * var->yoffset;
+
+	jzfb_wait_for_vsync(info);
+
+	jzfb->refresh_on_pan = 1;
+	flush_delayed_work(&jzfb->refresh_work);
+	return 0;
+}
+
+static int jzfb_mmap(struct fb_info *info, struct vm_area_struct *vma)
+{
+	const unsigned long offset = vma->vm_pgoff << PAGE_SHIFT;
+	const unsigned long size = vma->vm_end - vma->vm_start;
+
+	if (offset + size > info->fix.smem_len)
+		return -EINVAL;
+
+	if (remap_pfn_range(vma, vma->vm_start,
+			    (info->fix.smem_start + offset) >> PAGE_SHIFT,
+			    size, vma->vm_page_prot))
+		return -EAGAIN;
+
+	return 0;
+}
+
+static int jzfb_alloc_devmem(struct jzfb *jzfb)
+{
+	int max_linesize = 0, max_framesize = 0;
+	int bytes_per_pixel;
+	struct fb_videomode *mode = jzfb->pdata->modes;
+	void *page;
+	int i;
+
+	for (i = 0; i < jzfb->pdata->num_modes; ++mode, ++i) {
+		if (max_linesize < mode->xres)
+			max_linesize = mode->xres;
+		if (max_framesize < mode->xres * mode->yres)
+			max_framesize = mode->xres * mode->yres;
+	}
+
+	bytes_per_pixel = jzfb_get_controller_bpp(jzfb) >> 3;
+	max_linesize *= bytes_per_pixel;
+	max_framesize *= bytes_per_pixel;
+
+	jzfb->framedesc = dma_alloc_coherent(&jzfb->pdev->dev,
+				    sizeof(*jzfb->framedesc),
+				    &jzfb->framedesc_phys, GFP_KERNEL);
+	if (!jzfb->framedesc)
+		return -ENOMEM;
+
+	jzfb->blackline_size = max_linesize;
+	jzfb->blackline = dma_alloc_coherent(&jzfb->pdev->dev,
+					     jzfb->blackline_size,
+					     &jzfb->blackline_phys, GFP_KERNEL);
+	if (!jzfb->blackline)
+		goto err_free_framedesc;
+
+	/* Set the black line to black... */
+	memset(jzfb->blackline, 0x00, jzfb->blackline_size);
+
+	/* reserve memory for two frames to allow double buffering */
+	jzfb->vidmem_size = PAGE_ALIGN(max_framesize * 2);
+	jzfb->vidmem = dma_alloc_coherent(&jzfb->pdev->dev,
+						jzfb->vidmem_size,
+						&jzfb->vidmem_phys, GFP_KERNEL);
+
+	if (!jzfb->vidmem)
+		goto err_free_blackline;
+
+	for (page = jzfb->vidmem; page < jzfb->vidmem + PAGE_ALIGN(jzfb->vidmem_size); page += PAGE_SIZE) {
+		SetPageReserved(virt_to_page(page));
+	}
+
+	(*jzfb->framedesc)[0].addr = jzfb->vidmem_phys;
+	(*jzfb->framedesc)[0].next = jzfb->framedesc_phys; // + sizeof(struct jzfb_framedesc);
+	(*jzfb->framedesc)[0].id = 0x01;
+	(*jzfb->framedesc)[0].cmd = (max_framesize / 4)
+			| JZ_LCD_CMD_EOF_IRQ | JZ_LCD_CMD_SOF_IRQ;
+
+	// double buffering doesn't used yet
+	(*jzfb->framedesc)[1].addr = jzfb->vidmem_phys + max_framesize;
+	(*jzfb->framedesc)[1].next = jzfb->framedesc_phys;
+	(*jzfb->framedesc)[1].id = 0x02;
+	(*jzfb->framedesc)[1].cmd = (max_framesize / 4)
+			| JZ_LCD_CMD_EOF_IRQ | JZ_LCD_CMD_SOF_IRQ;
+
+	return 0;
+
+err_free_blackline:
+	dma_free_coherent(&jzfb->pdev->dev, jzfb->blackline_size,
+				jzfb->blackline, jzfb->blackline_phys);
+err_free_framedesc:
+	dma_free_coherent(&jzfb->pdev->dev, sizeof(*jzfb->framedesc),
+				jzfb->framedesc, jzfb->framedesc_phys);
+	return -ENOMEM;
+}
+
+static void jzfb_free_devmem(struct jzfb *jzfb)
+{
+	dma_free_coherent(&jzfb->pdev->dev, jzfb->vidmem_size,
+				jzfb->vidmem, jzfb->vidmem_phys);
+	dma_free_coherent(&jzfb->pdev->dev, jzfb->blackline_size,
+				jzfb->blackline, jzfb->blackline_phys);
+	dma_free_coherent(&jzfb->pdev->dev, sizeof(*jzfb->framedesc),
+				jzfb->framedesc, jzfb->framedesc_phys);
+}
+
+static struct fb_ops jzfb_ops = {
+	.owner			= THIS_MODULE,
+	.fb_check_var 		= jzfb_check_var,
+	.fb_set_par 		= jzfb_set_par,
+	.fb_setcolreg		= jzfb_setcolreg,
+	.fb_blank		= jzfb_blank,
+	.fb_pan_display		= jzfb_pan_display,
+	.fb_fillrect		= sys_fillrect,
+	.fb_copyarea		= sys_copyarea,
+	.fb_imageblit		= sys_imageblit,
+	.fb_mmap		= jzfb_mmap,
+};
+
+static irqreturn_t jz4740_lcd_irq(int irq, void *dev_id)
+{
+	struct jzfb *jzfb = dev_id;
+	unsigned long state = readl(jzfb->base + JZ_REG_LCD_STATE);
+
+	if (state & JZ_LCD_STATE_SOF) {
+		//init_completion(&jzfb->dma_completion);
+		state &= ~JZ_LCD_STATE_SOF;
+	} else {
+		complete_all(&jzfb->dma_completion);
+		{
+			u32 ctrl = readl(jzfb->base + JZ_REG_LCD_CTRL);
+			ctrl &= ~JZ_LCD_CTRL_ENABLE;
+			writel(ctrl, jzfb->base + JZ_REG_LCD_CTRL);
+			while ((readl(jzfb->base + JZ_REG_LCD_STATE) & BIT(7)) == 0);
+		}
+		writel(jzfb->framedesc_phys, jzfb->base + JZ_REG_LCD_DA0);
+		gpiod_set_value(jzfb->cs, GPIOD_OUT_LOW);
+		state &= ~JZ_LCD_STATE_EOF;
+	}
+
+	/* Acknowledge the interrupt */
+	writel(state, jzfb->base + JZ_REG_LCD_STATE);
+	return IRQ_HANDLED;
+}
+
+/* Display */
+static struct fb_videomode uc8230_video_modes[] = {
+	{
+		.name = "320x240",
+		.xres = 320,
+		.yres = 240,
+		.refresh = 30,
+		.left_margin = 140,
+		.right_margin = 273,
+		.upper_margin = 20,
+		.lower_margin = 2,
+		.hsync_len = 1,
+		.vsync_len = 1,
+		.sync = 0,
+		.vmode = FB_VMODE_NONINTERLACED,
+	},
+};
+
+static struct jz4740_fb_platform_data rzx27_fb_pdata = {
+	.width		= 60,
+	.height		= 45,
+	.num_modes	= ARRAY_SIZE(uc8230_video_modes),
+	.modes		= uc8230_video_modes,
+	.bpp		= 16,
+	.lcd_type	= JZ_LCD_TYPE_SMART_PARALLEL_8_BIT,
+	.pixclk_falling_edge = 0,
+	.chip_select_active_low = 1,
+	.register_select_active_low = 1,
+};
+
+static int jzfb_probe(struct platform_device *pdev)
+{
+	int ret, irq;
+	struct jzfb *jzfb;
+	struct fb_info *fb;
+	struct jz4740_fb_platform_data *pdata = &rzx27_fb_pdata;
+	struct resource *mem;
+
+	pdev->dev.platform_data = &rzx27_fb_pdata;
+
+	if (!pdata) {
+		dev_err(&pdev->dev, "Missing platform data\n");
+		return -ENOENT;
+	}
+
+	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+
+	if (!mem) {
+		dev_err(&pdev->dev, "Failed to get register memory resource\n");
+		return -ENOENT;
+	}
+
+	mem = request_mem_region(mem->start, resource_size(mem), pdev->name);
+
+	if (!mem) {
+		dev_err(&pdev->dev, "Failed to request register memory region\n");
+		return -EBUSY;
+	}
+
+	fb = framebuffer_alloc(sizeof(struct jzfb), &pdev->dev);
+
+	if (!fb) {
+		dev_err(&pdev->dev, "Failed to allocate framebuffer device\n");
+		ret = -ENOMEM;
+		goto err_release_mem_region;
+	}
+
+	fb->fbops = &jzfb_ops;
+	fb->flags = FBINFO_DEFAULT;
+
+	jzfb = fb->par;
+	jzfb->pdev = pdev;
+	jzfb->pdata = pdata;
+	jzfb->mem = mem;
+
+	jzfb->refresh_on_pan = 0;
+	init_completion(&jzfb->dma_completion);
+	complete_all(&jzfb->dma_completion);
+
+	jzfb->cs = devm_gpiod_get_index(&pdev->dev, "cs", 0, GPIOD_OUT_LOW);
+	if (!jzfb->cs) {
+		dev_err(&pdev->dev, "Failed to request CS GPIO\n");
+		goto err_framebuffer_release;
+	}
+
+	jzfb->ldclk = devm_clk_get(&pdev->dev, "lcd");
+	if (IS_ERR(jzfb->ldclk)) {
+		ret = PTR_ERR(jzfb->ldclk);
+		dev_err(&pdev->dev, "Failed to get lcd clock: %d\n", ret);
+		goto err_framebuffer_release;
+	}
+
+	jzfb->lpclk = devm_clk_get(&pdev->dev, "lcd_pclk");
+	if (IS_ERR(jzfb->lpclk)) {
+		ret = PTR_ERR(jzfb->lpclk);
+		dev_err(&pdev->dev, "Failed to get lcd pixel clock: %d\n", ret);
+		goto err_framebuffer_release;
+	}
+
+	jzfb->base = ioremap(mem->start, resource_size(mem));
+
+	if (!jzfb->base) {
+		dev_err(&pdev->dev, "Failed to ioremap register memory region\n");
+		ret = -EBUSY;
+		goto err_framebuffer_release;
+	}
+
+	platform_set_drvdata(pdev, jzfb);
+
+	fb_videomode_to_modelist(pdata->modes, pdata->num_modes,
+				 &fb->modelist);
+	fb->mode = pdata->modes;
+
+	fb_videomode_to_var(&fb->var, fb->mode);
+	fb->var.bits_per_pixel = pdata->bpp;
+	jzfb_check_var(&fb->var, fb);
+
+	ret = jzfb_alloc_devmem(jzfb);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to allocate video memory\n");
+		goto err_iounmap;
+	}
+
+	fb->fix = jzfb_fix;
+	fb->fix.line_length = fb->var.bits_per_pixel * fb->var.xres / 8;
+	fb->fix.mmio_start = mem->start;
+	fb->fix.mmio_len = resource_size(mem);
+	fb->fix.smem_start = jzfb->vidmem_phys;
+	fb->fix.smem_len =  jzfb->vidmem_size;
+	fb->screen_base = jzfb->vidmem;
+	fb->pseudo_palette = jzfb->pseudo_palette;
+
+	fb_alloc_cmap(&fb->cmap, 256, 0);
+
+	mutex_init(&jzfb->lock);
+
+	clk_prepare_enable(jzfb->lpclk);
+	clk_prepare_enable(jzfb->ldclk);
+	jzfb->is_enabled = 1;
+#define MODE_LCM (0b1101)
+	writel(JZ_LCD_CFG_SLCD | JZ_LCD_CFG_PS_DISABLE | JZ_LCD_CFG_CLS_DISABLE | JZ_LCD_CFG_SPL_DISABLE | JZ_LCD_CFG_REV_DISABLE | MODE_LCM, jzfb->base + JZ_REG_LCD_CFG);
+	writeb(0, jzfb->base + JZ_REG_SLCD_CTRL);
+	writel(jzfb->framedesc_phys, jzfb->base + JZ_REG_LCD_DA0);
+
+	jzfb_set_par(fb);
+
+	irq = platform_get_irq(pdev, 0);
+	if (irq < 0) {
+		ret = irq;
+		dev_err(&pdev->dev, "Failed to get IRQ\n");
+		goto err_free_devmem;
+	}
+
+	ret = request_irq(irq, jz4740_lcd_irq, 0, "LCD", jzfb);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to request IRQ\n");
+		goto err_free_devmem;
+	}
+
+	jzfb_stop_controller(jzfb);
+
+	fb->bl_dev = devm_of_find_backlight(&pdev->dev);
+
+	if (IS_ERR(fb->bl_dev)) {
+		dev_warn(&pdev->dev, "Failed to get backlight node, error %d", (int)PTR_ERR(fb->bl_dev));
+		fb->bl_dev = NULL;
+	} else {
+		fb_bl_default_curve(fb, 0, 0, 9);
+		backlight_enable(fb->bl_dev);
+	}
+
+	INIT_DELAYED_WORK(&jzfb->refresh_work, jzfb_refresh_work);
+
+	ret = register_framebuffer(fb);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to register framebuffer: %d\n", ret);
+		return ret;
+		goto err_free_irq;
+	}
+
+	jzfb->fb = fb;
+	fb_prepare_logo(jzfb->fb, 0);
+	fb_show_logo(jzfb->fb, 0);
+	jzfb->is_enabled = 1;
+
+	schedule_delayed_work(&jzfb->refresh_work, 0);
+	return 0;
+
+err_free_irq:
+	free_irq(irq, jzfb);
+err_free_devmem:
+	fb_dealloc_cmap(&fb->cmap);
+	jzfb_free_devmem(jzfb);
+err_iounmap:
+	iounmap(jzfb->base);
+err_framebuffer_release:
+	framebuffer_release(fb);
+err_release_mem_region:
+	release_mem_region(mem->start, resource_size(mem));
+	return ret;
+}
+
+static int jzfb_remove(struct platform_device *pdev)
+{
+	struct jzfb *jzfb = platform_get_drvdata(pdev);
+
+	jzfb_blank(FB_BLANK_POWERDOWN, jzfb->fb);
+
+	// FIXME free_irq(JZ4740_IRQ_LCD, jzfb);
+
+	/* Blanking will prevent future refreshes from behind scheduled.
+	   Now wait for a possible refresh in progress to finish. */
+	cancel_delayed_work_sync(&jzfb->refresh_work);
+
+	iounmap(jzfb->base);
+	release_mem_region(jzfb->mem->start, resource_size(jzfb->mem));
+
+	fb_dealloc_cmap(&jzfb->fb->cmap);
+	jzfb_free_devmem(jzfb);
+
+	platform_set_drvdata(pdev, NULL);
+
+	clk_put(jzfb->lpclk);
+	clk_put(jzfb->ldclk);
+
+	framebuffer_release(jzfb->fb);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM
+
+static int jzfb_suspend(struct device *dev)
+{
+	struct jzfb *jzfb = dev_get_drvdata(dev);
+
+	console_lock();
+	fb_set_suspend(jzfb->fb, 1);
+	console_unlock();
+
+	mutex_lock(&jzfb->lock);
+	if (jzfb->is_enabled)
+		jzfb_disable(jzfb);
+	mutex_unlock(&jzfb->lock);
+
+	return 0;
+}
+
+static int jzfb_resume(struct device *dev)
+{
+	struct jzfb *jzfb = dev_get_drvdata(dev);
+
+	mutex_lock(&jzfb->lock);
+	if (jzfb->is_enabled)
+		jzfb_enable(jzfb);
+	mutex_unlock(&jzfb->lock);
+
+	console_lock();
+	fb_set_suspend(jzfb->fb, 0);
+	console_unlock();
+
+	return 0;
+}
+
+static SIMPLE_DEV_PM_OPS(jzfb_pm_ops, jzfb_suspend, jzfb_resume);
+
+#define JZFB_PM_OPS (&jzfb_pm_ops)
+
+#else
+#define JZFB_PM_OPS NULL
+#endif
+
+static const struct of_device_id ingenic_slcd_of_match[] = {
+	{ .compatible = "ingenic,jz4725b-slcd", .data = NULL },
+	{ /* sentinel */ },
+};
+
+static struct platform_driver jzfb_driver = {
+	.probe		= jzfb_probe,
+	.remove		= jzfb_remove,
+	.driver = {
+		.name	= "jz4740-fb",
+		.pm	= JZFB_PM_OPS,
+		.of_match_table = of_match_ptr(ingenic_slcd_of_match),
+	},
+};
+
+static int __init jzfb_init(void)
+{
+	return platform_driver_register(&jzfb_driver);
+}
+module_init(jzfb_init);
+
+static void __exit jzfb_exit(void)
+{
+	platform_driver_unregister(&jzfb_driver);
+}
+module_exit(jzfb_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Lars-Peter Clausen <lars@metafoo.de>, Maarten ter Huurne <maarten@treewalker.org>, Siarhei Volkau <lis8215@gmail.com>");
+MODULE_DESCRIPTION("JZ4740 SoC SLCD framebuffer driver");
+MODULE_ALIAS("platform:jz4740-fb");
-- 
2.13.6

